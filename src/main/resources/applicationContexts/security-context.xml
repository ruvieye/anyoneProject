<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/security 
						http://www.springframework.org/schema/security/spring-security-3.2.xsd">


	<!--보안인증이 필요한 페이지에 대한 설정 설정 -->
	<http auto-config="true" use-expressions="true">
        <!-- 로그인 페이지는 무조건 허용 -->
		<intercept-url pattern="/login" access="permitAll" />
        
        <!-- 개인정보는 fullyAuthentication을 요구하도록 하자 -->
        <intercept-url pattern="/account" access="hasRole('ROLE_USER') and fullyAuthenticated" />
        
        <!-- 나머지는 remember me를 포함한 role_user만 접근 가능 -->
		<intercept-url pattern="/*" access="hasRole('ROLE_USER')" />
        

		<!-- 사용자정의 로그인페이지 설정 -->
		<form-login login-page="/login"  
			username-parameter="username" password-parameter="password" 
			authentication-success-handler-ref="loginSuccessHandler"
			authentication-failure-handler-ref="loginFailureHandler" 
		/>
        
        <!-- remember me 설정 -->
        <remember-me key="anyoneProjectRememberMeKey!@#" 
                    token-validity-seconds="86400"/>
        
        
		<logout logout-url="/logout" 
                logout-success-url="/login" />
                
	</http>


    <!-- autoConfig 를 통해 자동으로 설정되는 필터들
    
    ContextPersistenceFilter    :SecurityContextReposotory에서 SecurityContext(사용자의 보호된 인증세션)를 로드하는 역할.
    LogoutFilter                :로그아웃URL(/j_spring_security_logout)에 지정된 요청값을 감시하고 로그아웃 시킴
    AuthenticationFilter        :사용자명과 비밀번호로 이뤄진 폼기반인증에 사용하는 가상URL요청(/j_spring_security_check)을 감시하고 인증진행
    DefaultLoginPageGeneratingFilter    :   폼기반 또는 OpenID기반 인증에 사용하는 가상URL(/j_spring_security_login)에 대한 요청을 감시하고 로그인 폼기능을 수행하는 HTML생성
    BasicAuthenticationFilter           :   HTTP기본 인증헤더를 감시하고 처리
    RequestCacheAwareFilter             :   로그인성공이후 인증 요청에 의해 가로채어진 원래 사용자 요청을을 재구성하는데 사용
    SecurityContextHolderAwareRquestFilter  :   HttpServletRequest 를 HttpServletRequestWrapper를 상속하는 하위클래서 SecurtyContextHoolderAwareRequestWrapper로 감싼다. 
                                                필터체인상 더 하단에 위차한 요청 프로세서에 추가 컨텍스르를  제공한다
    AnnoymousAuthenticationFilter       :   이 필터가 호출되는 시점까지 사용자가 아직 인증을 받지 못했다면 요청관련 인증토큰에서 사용자가 익명 사용자로 나타나게 된다.
    SessionManagementFilter     :인증된 주체를 바탕으로 세션트래킹을 처리해 단일 주체와 관련한 모든 세션들이 트래킹되도록 돕는다.
    ExceptionTranslationFilter  :이 필터는 보호된 요청을 처리하는 동안 발생할 수 있는 기대한 예외의 기본 라우팅과 위임을 처리한다.
    FilterSecurityInterceptor   :이 필터는 권한 부여과 관련한 결정을 AccessDecisionManger에게 위임해 권한 부여결정 및 접근 제어 결정을 쉽게 만들어 준다.
    
     -->


	<!-- 로그인/아웃관련 핸들러빈 -->
	<beans:bean id="loginSuccessHandler" class="com.project.anyone.security.LoginSuccessHandler"></beans:bean>
	<beans:bean id="loginFailureHandler" class="com.project.anyone.security.LoginFailureHandler"></beans:bean>


    <!-- 인증관리자 -->
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="guest" password="guest" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>


</beans:beans>